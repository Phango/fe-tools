// eslint-disable-next-line spaced-comment
/// <reference path="./types.d.ts"/>
const { resolve: pathResolve } = require("path");

const COMPONENTS_DIR = "src/components";
const TEMPLATES_DIR = "scripts/create-component/templates";
const SCSS_MAIN = "src/styles/index.scss";
const PAGES_MAIN = "src/styleguide/index.html";
const JS_COMPONENTS_MAIN = "src/js/components/index.js";
const TS_COMPONENTS_MAIN = "src/js/components/index.ts";
const KARMA_MAIN = "src/js/karma/index.spec.js";

/**
 * file type which are supported by assemble-lite
 */
const DATA_FILE_TYPES = { JSON: ".json", YAML: ".yaml" };

const COMPONENT_TYPES = {
  ELEMENT: "Element",
  MODULE: "Module",
  PAGE: "Page",
};

/**
 * returns the template function from the user or the default templates if the user did not override it
 *
 * @param {string} filename - template filename
 * @returns {function}
 */
function getTemplate(filename, { templatesDir = TEMPLATES_DIR } = {}) {
  let template;

  try {
    template = require(pathResolve(`${templatesDir}/${filename}`));
  } catch (_error) {
    // user did not provide a template, use the default one
    template = require(`./lib/templates/${filename}`);
  }

  return template;
}

/**
 * default configuration for the questions and files which are generated by `@pro-vision/pv-create-component`
 * @type {PvCreateComponent.Config}
 */
module.exports = [
  // Component Name
  {
    id: "NAME",
    prompt: {
      name: "name",
      type: "input",
      message: "What's the component's name?:",
      validate(value) {
        // only letters and numbers. (no special characters such as '-' and '_')
        const pass = value.match(/(^[a-zA-Z0-9 ]+$)/g);
        if (pass) {
          return true;
        }

        return "Please enter only letters, numbers and spaces";
      },
      filter(name) {
        // " Related Topics " -> "related topics"
        return (
          name
            .trim()
            .toLowerCase()
            // only one empty space between letters is allowed
            .replace(/ ( )+/g, " ")
        );
      },
    },
  },
  // type
  {
    id: "TYPE",
    prompt: {
      name: "type",
      type: "list",
      message: "Type?",
      choices: [
        COMPONENT_TYPES.ELEMENT,
        COMPONENT_TYPES.MODULE,
        COMPONENT_TYPES.PAGE,
      ],
    },
  },
  // page
  {
    id: "PAGE",
    files: [
      {
        id: "PAGE-FILE",
        when: (options) => options.type === COMPONENT_TYPES.PAGE,
        template: (options) => getTemplate("hbsPageTemplate", options)(options),
        path: (options) => `${options.kebabCase}.hbs`,
      },
    ],
    imports: [
      {
        id: "PAGE-INDEX",
        when: (options) => options.type === COMPONENT_TYPES.PAGE,
        path: PAGES_MAIN,
        template: (options) =>
          `<a href="pages/${options.kebabCase}.html"> ${options.name} </a>`,
        placeholder: "<!-- IMPORT-PLACEHOLDER -->",
      },
    ],
  },
  // scss
  {
    id: "SCSS",
    prompt: {
      name: "hasScss",
      when: (options) => options.type !== COMPONENT_TYPES.PAGE,
      type: "confirm",
      message: "Has scss?",
      default: true,
    },
    files: [
      {
        id: "SCSS-FILE",
        when: (options) => options.hasScss,
        template: (options) => getTemplate("scssTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}.scss`,
      },
    ],
    imports: [
      {
        id: "SCSS-IMPORT",
        when: (options) => options.hasScss,
        path: SCSS_MAIN,
        template: (options) =>
          `@import "../components/${options.componentName}/${options.componentName}";`,
      },
    ],
  },
  // hbs
  {
    id: "HBS",
    prompt: {
      name: "hasHbs",
      when: (options) => options.type !== COMPONENT_TYPES.PAGE,
      type: "confirm",
      message: "Has hbs?",
      default: true,
    },
    files: [
      {
        id: "HBS-FILE",
        when: (options) => options.hasHbs,
        template: (options) => getTemplate("hbsTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}.hbs`,
      },
    ],
  },
  // --demo.hbs
  {
    id: "HBS-DEMO",
    files: [
      {
        id: "HBS-DEMO-FILE",
        when: (options) => options.hasHbs || options.hasScss,
        template: (options) => getTemplate("hbsDemoTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/demo/${options.componentName}--demo.hbs`,
      },
    ],
  },
  // markdown
  {
    id: "MD",
    files: [
      {
        id: "MD-FILE",
        when: (options) => options.hasHbs || options.hasScss,
        template: (options) => getTemplate("mdTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}.md`,
      },
    ],
  },
  // data type
  {
    id: "DATA",
    prompt: {
      name: "dataFile",
      when: (options) => options.hasHbs,
      type: "list",
      message: "Use Data File?",
      choices: ["don't", DATA_FILE_TYPES.JSON, DATA_FILE_TYPES.YAML],
      filter(dataFile) {
        if (
          dataFile === DATA_FILE_TYPES.JSON ||
          dataFile === DATA_FILE_TYPES.YAML
        )
          return dataFile;
        return false;
      },
    },
    files: [
      {
        id: "DATA-JSON-FILE",
        when: (options) => options.dataFile === DATA_FILE_TYPES.JSON,
        template: (options) => getTemplate("jsonTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}__data.json`,
      },
      {
        id: "DATA-YAML-FILE",
        when: (options) => options.dataFile === DATA_FILE_TYPES.YAML,
        template: (options) => getTemplate("yamlTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}__data.yaml`,
      },
    ],
  },
  // js
  {
    id: "JS",
    prompt: {
      name: "hasJs",
      when: (options) =>
        !options.useTS && options.type !== COMPONENT_TYPES.PAGE,
      type: "confirm",
      message: "Has js",
      default: true,
    },
    files: [
      {
        id: "JS-FILE",
        when: (options) => options.hasJs,
        template: (options) => getTemplate("jsTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}.js`,
      },
    ],
    imports: [
      {
        id: "JS-IMPORT",
        when: (options) => options.hasJs,
        path: JS_COMPONENTS_MAIN,
        template: (options) =>
          `import "Components/${options.componentName}/${options.componentName}";`,
      },
    ],
  },
  // ts
  {
    id: "TS",
    prompt: {
      name: "hasTs",
      when: (options) => options.useTS && options.type !== COMPONENT_TYPES.PAGE,
      type: "confirm",
      message: "Has ts",
      default: true,
    },
    files: [
      {
        id: "TS-FILE",
        when: (options) => options.hasTs,
        template: (options) => getTemplate("tsTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/${options.componentName}.ts`,
      },
    ],
    imports: [
      {
        id: "TS-IMPORT",
        when: (options) => options.hasTs,
        path: TS_COMPONENTS_MAIN,
        template: (options) =>
          `import "Components/${options.componentName}/${options.componentName}";`,
      },
    ],
  },
  // unit test
  {
    id: "UNIT",
    prompt: {
      name: "hasUnit",
      when: (options) => options.dontCheck || options.hasJs || options.hasTs,
      type: "confirm",
      message: "Add Unit test?",
      default: true,
    },
    files: [
      // Jest
      {
        id: "JEST-FILE",
        when: (options) => options.hasUnit && options.unit === "jest",
        template: (options) => getTemplate("jestTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/specs/unit/${options.componentName}.test.ts`,
      },
      // Karma + Jasmine
      {
        id: "KARMA-FILE",
        when: (options) => options.hasUnit && options.unit === "karma",
        template: (options) => getTemplate("karmaTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/specs/unit/${options.componentName}.spec.js`,
      },
    ],
    imports: [
      // Karma + Jasmine unit test
      {
        id: "KARMA-IMPORT",
        when: (options) => options.hasUnit && options.unit === "karma",
        path: KARMA_MAIN,
        template: (options) =>
          `import "Components/${options.componentName}/specs/unit/${options.componentName}.spec.js";`,
      },
    ],
  },
  // galen
  {
    id: "GALEN",
    prompt: {
      name: "hasGalen",
      when: (options) =>
        options.type !== COMPONENT_TYPES.PAGE &&
        (options.hasScss || options.dontCheck),
      type: "confirm",
      message: "Add Galen test?",
      default: true,
    },
    files: [
      {
        id: "GALEN-TEST-FILE",
        when: (options) => options.hasGalen,
        template: (options) =>
          getTemplate("galenTestTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/specs/galen/${options.componentName}.test.js`,
      },
      {
        id: "GALEN-SPEC-FILE",
        when: (options) => options.hasGalen,
        template: (options) =>
          getTemplate("galenSpecTemplate", options)(options),
        path: (options) =>
          `${COMPONENTS_DIR}/${options.componentName}/specs/galen/${options.componentName}.gspec`,
      },
    ],
  },
  // git add
  {
    id: "GIT",
    prompt: {
      name: "gitAdd",
      when: (options) => !options.skip.includes("git"),
      type: "confirm",
      message: "track new files via git? (git add)",
      default: true,
    },
  },
];
